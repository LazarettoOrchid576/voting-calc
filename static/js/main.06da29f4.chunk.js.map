{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","voteTypes","setVoteTypes","votes","setVotes","guideurl","setGuideURL","seasonNumber","setSeasonNumber","voteTotals","setVoteTotals","votesToCast","setVotesToCast","reverse","setReverse","guideowner","setGuideOwner","includeWills","setIncludeWills","idols","setIdols","Math","floor","random","idolRandom","siesta","setSiesta","wimdys","setWimdys","loadData","a","fetch","process","config","json","configJson","votetypes","season","sort","useEffect","votesleft","totalPct","map","type","value","reduce","b","pctleft","castVotes","totals","filter","votetype","forEach","idx","label","includeInTotal","length","adjValue","votesToAdd","round","min","chosenIdol","idol","x","getIdolizedPlayer","className","id","inputMode","pattern","step","onChange","e","target","defaultChecked","onClick","slice","val","key","style","renderVote","rel","href","name","wimdy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06da29f4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nconst App = () => {\n  const [voteTypes, setVoteTypes] = useState([[\"Loading...\", 1.0]]);\n  const [votes, setVotes] = useState(0);\n  const [guideurl, setGuideURL] = useState(\"http://nymillennials.rocks\");\n  const [seasonNumber, setSeasonNumber] = useState(\"?\");\n  const [voteTotals, setVoteTotals] = useState({});\n  const [votesToCast, setVotesToCast] = useState(0);\n  const [reverse, setReverse] = useState(false);\n  const [guideowner, setGuideOwner] = useState(\"our team\");\n  const [includeWills, setIncludeWills] = useState(true);\n  const [idols, setIdols] = useState([]);\n  const [idolRandom, setIdolRandom] = useState(Math.floor(Math.random() * 100) + 1);\n  const [siesta, setSiesta] = useState(false);\n  const [wimdys, setWimdys] = useState([]);\n  const colorH = 115;\n  const colorS = 100;\n  const maxL = 45;\n  const minL = 15;\n  const debug = false;\n  \n\n  const loadData = async () => {\n    const config = await fetch(`${process.env.PUBLIC_URL}/config.json`);\n    const configJson = await config.json();\n    setVoteTypes(configJson.votetypes);\n    setGuideURL(configJson.guideurl ?? \"http://nymillennials.rocks\");\n    setSeasonNumber(configJson.season ?? \"?\");\n    setReverse(configJson.reverse ?? false);\n    setGuideOwner(configJson.guideowner ?? \"our team\");\n    setIdols(configJson.idols ?? []);\n    setSiesta(configJson.siesta ?? false);\n    setWimdys(configJson.wimdys?.sort(() => Math.random() - 0.5) ?? []);\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [])\n\n  useEffect(() => {\n    let votesleft = votes;\n    const totalPct = voteTypes.map(({type, value}) => (includeWills || type !== \"will\") ? value : 0).reduce((a, b) => a + b, 0);\n    let pctleft = 1.0;\n    let castVotes = 0;\n    const totals = {};\n    voteTypes.filter(votetype => includeWills || votetype.type !== \"will\").forEach(({label, value, includeInTotal, type}, idx) => {\n      if (idx === voteTypes.length - 1) {\n        totals[label] = votesleft;\n        if (includeInTotal) {\n          castVotes += votesleft;\n        }\n      } else {\n        const adjValue = (value * (1 / totalPct));\n        const calculatedVotes = Math.round((adjValue / pctleft) * votesleft);\n        const votesToAdd = calculatedVotes || Math.min(votesleft, 1);\n        totals[label] = votesToAdd;\n        if (includeInTotal) {\n          castVotes += votesToAdd;\n        }\n        pctleft -= adjValue;\n        votesleft -= totals[label]\n      }\n    });\n    setVoteTotals(totals);\n    setVotesToCast(castVotes);\n  }, [votes, voteTypes, includeWills]);\n\n  const getLValue = (val) => {\n    return maxL - ((maxL - minL) * val);\n  };\n\n  const getIdolizedPlayer = () => {\n    let idol = idols[0];\n    for (let x=1; x<idols.length; x++) {\n      if (idols[x].value >= idolRandom) {\n        return idol;\n      }\n      idol = idols[x];\n    }\n    return idol;\n  };\n\n  const chosenIdol = getIdolizedPlayer();\n\n  const renderVote = votetype => {\n    const debugText = debug ? ` - ${votes <= 0 ? (0).toFixed(2) : (((voteTotals[votetype.label] ?? 0) / votes) * 100.0).toFixed(2)}%` : \"\";\n    return (\n      <div key={`${votetype.label}`} className=\"voteType\" style={{ \"color\": votetype.value > .8 ? \"white\": \"black\", \"backgroundColor\": `hsl(${colorH}, ${colorS}%, ${getLValue(votetype.value)}%)` }}>\n        {`${votetype.label + (votetype.type === \"wimdy\" ? \" *\" : \"\")}: ${voteTotals[votetype.label] ?? 0} vote${voteTotals[votetype.label] === 1 ? \"\" : \"s\"}${debugText}`}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <label>How many votes do you have?</label>\n      <input id=\"votes\" type=\"number\" inputMode=\"numeric\" pattern=\"[0-9]*\" min=\"0\" step=\"1\" value={votes} onChange={e => setVotes(e.target.value)} />\n      <label className=\"includeWills\"><input type=\"checkbox\" defaultChecked={includeWills} onClick={() => setIncludeWills(!includeWills)}/> Include Wills?</label>\n      <br />\n      <br />\n      {(reverse ? voteTypes.slice(0).reverse() : voteTypes).filter(votetype => includeWills || votetype.type !== \"will\").map((votetype) => renderVote(votetype))}\n      <br />\n      <div>Total Votes to Cast: {votesToCast}</div>\n      {(!!idols.length && <h2>\n        Idolize: <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.blaseball.com/player/${chosenIdol.id}`}>{chosenIdol.name}</a> (rolled {idolRandom})\n        </h2>)}\n    <br />\n    { \n      wimdys.length ? (\n      <>\n        <div>* Vote with your heart on any of the following: <br />\n        <ul>\n          {wimdys.map(wimdy => <li key={wimdy}>{wimdy}</li>)}\n        </ul>\n        </div>\n      </>\n      ) : \"\"\n    }\n    {\n      siesta ? (\n        <div><span style={{\"color\": \"red\"}}>&lt;3</span>, The New York Millennials Voting Guide Team</div>\n      ) : (\n        <div>Why these picks? <a target=\"_blank\" rel=\"noopener noreferrer\" href={guideurl}>{`Read ${guideowner}'s awesome voting guide for Season ${seasonNumber}!`}</a></div>\n      )\n    }\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}