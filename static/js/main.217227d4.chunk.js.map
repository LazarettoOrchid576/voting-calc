{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useStateWithLocalStorageBool","localStorageKey","defaultVal","initialStateVal","localStorageValue","localStorage","getItem","React","useState","value","setValue","useEffect","setItem","voteTypes","setVoteTypes","votes","setVotes","guideurl","setGuideURL","seasonNumber","setSeasonNumber","voteTotals","setVoteTotals","votesToCast","setVotesToCast","reverse","setReverse","guideowner","setGuideOwner","idols","setIdols","Math","floor","random","idolRandom","siesta","setSiesta","rawWimdys","setRawWimdys","wimdys","setWimdys","showOptions","setShowOptions","includeWills","setIncludeWills","orderWimdys","setOrderWimdys","showWimdyPct","setShowWimdyPct","loadData","a","fetch","process","config","json","configJson","votetypes","season","length","sort","votesleft","totalPct","map","type","parseFloat","reduce","b","pctleft","castVotes","totals","filter","votetype","forEach","idx","label","includeInTotal","undefined","adjValue","votesToAdd","round","min","chosenIdol","idol","x","getIdolizedPlayer","renderVote","val","wimdyLabel","wimdyVoteSplit","toFixed","slider","style","marginLeft","max","step","onChange","e","newvalue","newVoteTypes","newVoteType","voteTypeCopy","push","changeValue","target","key","className","color","backgroundColor","id","inputMode","pattern","onClick","defaultChecked","slice","order","rel","href","name","wimdy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.217227d4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const useStateWithLocalStorageBool = (localStorageKey, defaultVal) => {\n    const localStorageValue = localStorage.getItem(localStorageKey);\n    let initialStateVal;\n    if (localStorageValue === \"true\") {\n      initialStateVal = true;\n    } else if (localStorageValue === \"false\") {\n      initialStateVal = false;\n    } else {\n      initialStateVal = defaultVal;\n    }\n    const [value, setValue] = React.useState(initialStateVal);\n\n    React.useEffect(() => {\n      localStorage.setItem(localStorageKey, value);\n    }, [localStorageKey, value]);\n\n    return [value, setValue];\n  };\n\n  const [voteTypes, setVoteTypes] = useState([[\"Loading...\", 1.0]]);\n  const [votes, setVotes] = useState(0);\n  const [guideurl, setGuideURL] = useState(\"http://nymillennials.rocks\");\n  const [seasonNumber, setSeasonNumber] = useState(\"?\");\n  const [voteTotals, setVoteTotals] = useState({});\n  const [votesToCast, setVotesToCast] = useState(0);\n  const [reverse, setReverse] = useState(false);\n  const [guideowner, setGuideOwner] = useState(\"our team\");\n  const [idols, setIdols] = useState([]);\n  const [idolRandom, setIdolRandom] = useState(\n    Math.floor(Math.random() * 100) + 1\n  );\n  const [siesta, setSiesta] = useState(false);\n  const [rawWimdys, setRawWimdys] = useState([]);\n  const [wimdys, setWimdys] = useState([]);\n  const colorH = 115;\n  const colorS = 100;\n  const maxL = 45;\n  const minL = 15;\n  const debug = false;\n  const [showOptions, setShowOptions] = useState(false);\n  const [includeWills, setIncludeWills] = useStateWithLocalStorageBool(\n    \"includeWills\",\n    true\n  );\n  const [orderWimdys, setOrderWimdys] = useStateWithLocalStorageBool(\n    \"orderWimdys\",\n    false\n  );\n  const [showWimdyPct, setShowWimdyPct] = useStateWithLocalStorageBool(\n    \"showWimdyPct\",\n    false\n  );\n\n  const loadData = async () => {\n    const config = await fetch(`${process.env.PUBLIC_URL}/config.json`);\n    const configJson = await config.json();\n    setVoteTypes(configJson.votetypes);\n    setGuideURL(configJson.guideurl ?? \"http://nymillennials.rocks\");\n    setSeasonNumber(configJson.season ?? \"?\");\n    setReverse(configJson.reverse ?? false);\n    setGuideOwner(configJson.guideowner ?? \"our team\");\n    setIdols(configJson.idols ?? []);\n    setSiesta(configJson.siesta ?? false);\n    setRawWimdys(configJson.wimdys ?? []);\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    if (rawWimdys.length) {\n      setWimdys(\n        orderWimdys ? rawWimdys : [...rawWimdys].sort(() => Math.random() - 0.5)\n      );\n    }\n  }, [orderWimdys, rawWimdys]);\n\n  useEffect(() => {\n    let votesleft = votes;\n    const totalPct = voteTypes\n      .map(({ type, value }) =>\n        includeWills || type !== \"will\" ? parseFloat(value) : 0\n      )\n      .reduce((a, b) => a + b, 0);\n    let pctleft = 1.0;\n    let castVotes = 0;\n    const totals = {};\n    voteTypes\n      .filter((votetype) => includeWills || votetype.type !== \"will\")\n      .forEach(({ label, value, includeInTotal, type }, idx) => {\n        if (idx === voteTypes.length - 1) {\n          totals[label] = votesleft;\n          if (includeInTotal || includeInTotal === undefined) {\n            castVotes += votesleft;\n          }\n        } else {\n          const adjValue = parseFloat(value) * (1 / totalPct);\n          const calculatedVotes = Math.round((adjValue / pctleft) * votesleft);\n          const votesToAdd = calculatedVotes || Math.min(votesleft, 1);\n          totals[label] = votesToAdd;\n          if (includeInTotal || includeInTotal === undefined) {\n            castVotes += votesToAdd;\n          }\n          pctleft -= adjValue;\n          votesleft -= totals[label];\n        }\n      });\n    setVoteTotals(totals);\n    setVotesToCast(castVotes);\n  }, [votes, voteTypes, includeWills]);\n\n  const getLValue = (val) => {\n    return maxL - (maxL - minL) * val;\n  };\n\n  const getIdolizedPlayer = () => {\n    let idol = idols[0];\n    for (let x = 1; x < idols.length; x++) {\n      if (idols[x].value >= idolRandom) {\n        return idol;\n      }\n      idol = idols[x];\n    }\n    return idol;\n  };\n\n  const chosenIdol = getIdolizedPlayer();\n\n  const changeValue = (votetype, newvalue) => {\n    const newVoteTypes = [];\n    voteTypes.forEach((newVoteType) => {\n      if (newVoteType.label === votetype.label) {\n        const voteTypeCopy = { ...newVoteType };\n        voteTypeCopy.value = newvalue;\n        newVoteTypes.push(voteTypeCopy);\n      } else {\n        newVoteTypes.push(newVoteType);\n      }\n    });\n    setVoteTypes(newVoteTypes);\n  };\n\n  const renderVote = (votetype) => {\n    const wimdyLabel = voteTypes.filter(\n      (votetype) => votetype.type === \"wimdy\"\n    )[0]?.label;\n    const debugText = debug\n      ? ` - ${\n          votes <= 0\n            ? (0).toFixed(2)\n            : (((voteTotals[votetype.label] ?? 0) / votes) * 100.0).toFixed(2)\n        }%`\n      : \"\";\n    const wimdyVoteSplit =\n      showWimdyPct && rawWimdys.length\n        ? ` (~${(voteTotals[wimdyLabel] / rawWimdys.length).toFixed(\n            2\n          )} votes each)`\n        : \"\";\n    const slider = votetype.min ? (\n      <input\n        type=\"range\"\n        style={{ marginLeft: \"10px\" }}\n        min={votetype.min}\n        max={votetype.max}\n        value={votetype.value}\n        step=\"0.01\"\n        onChange={(e) => changeValue(votetype, e.target.value)}\n      />\n    ) : null;\n    return (\n      <div\n        key={`${votetype.label}`}\n        className=\"voteType\"\n        style={{\n          color: votetype.value > 0.8 ? \"white\" : \"black\",\n          backgroundColor: `hsl(${colorH}, ${colorS}%, ${getLValue(\n            votetype.value\n          )}%)`,\n        }}\n      >\n        {`${votetype.label + (votetype.type === \"wimdy\" ? \" *\" : \"\")}: ${\n          voteTotals[votetype.label] ?? 0\n        } vote${voteTotals[votetype.label] === 1 ? \"\" : \"s\"}${debugText}${\n          votetype.type === \"wimdy\" ? wimdyVoteSplit : \"\"\n        }`}\n        {slider}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <label>How many votes do you have?</label>\n      <input\n        id=\"votes\"\n        type=\"number\"\n        inputMode=\"numeric\"\n        pattern=\"[0-9]*\"\n        min=\"0\"\n        step=\"1\"\n        value={votes}\n        onChange={(e) => setVotes(e.target.value)}\n      />\n      <button\n        className=\"showOptions\"\n        onClick={() => setShowOptions(!showOptions)}\n      >\n        {showOptions ? \"Hide\" : \"Show\"} Options\n      </button>\n      <br />\n      {showOptions && (\n        <div>\n          <br />\n          <label className=\"option\">\n            <input\n              type=\"checkbox\"\n              defaultChecked={includeWills}\n              onClick={() => setIncludeWills(!includeWills)}\n            />{\" \"}\n            Include Wills\n          </label>\n          <label className=\"option\">\n            <input\n              type=\"checkbox\"\n              defaultChecked={orderWimdys}\n              onClick={() => setOrderWimdys(!orderWimdys)}\n            />{\" \"}\n            Keep Wimdys In Order\n          </label>\n          <label className=\"option\">\n            <input\n              type=\"checkbox\"\n              defaultChecked={showWimdyPct}\n              onClick={() => setShowWimdyPct(!showWimdyPct)}\n            />{\" \"}\n            Show Wimdy Percentage Split\n          </label>\n          <br />\n        </div>\n      )}\n      <br />\n      {(reverse ? voteTypes.slice(0).reverse() : voteTypes)\n        .sort((a, b) => a.order - b.order)\n        .filter((votetype) => includeWills || votetype.type !== \"will\")\n        .map((votetype) => renderVote(votetype))}\n      <br />\n      <div>Total Votes to Cast: {votesToCast}</div>\n      {!!idols.length && (\n        <h2>\n          Idolize:{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={`https://www.blaseball.com/player/${chosenIdol.id}`}\n          >\n            {chosenIdol.name}\n          </a>{\" \"}\n          (rolled {idolRandom})\n        </h2>\n      )}\n      <br />\n      {wimdys.length ? (\n        <>\n          <div>\n            * Vote with your heart on any of the following: <br />\n            <ul>\n              {wimdys.map((wimdy) => (\n                <li key={wimdy}>{wimdy}</li>\n              ))}\n            </ul>\n          </div>\n        </>\n      ) : (\n        \"\"\n      )}\n      {siesta ? (\n        <div>\n          <span style={{ color: \"red\" }}>&lt;3</span>, The New York Millennials\n          Voting Guide Team\n        </div>\n      ) : (\n        <div>\n          Why these picks?{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={guideurl}\n          >{`Read ${guideowner}'s awesome voting guide for Season ${seasonNumber}!`}</a>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}