{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","voteTypes","setVoteTypes","votes","setVotes","guideurl","setGuideURL","seasonNumber","setSeasonNumber","voteTotals","setVoteTotals","loadData","a","fetch","process","config","json","configJson","votetypes","season","useEffect","votesleft","pctleft","totals","forEach","idx","name","pct","length","calculatedVotes","Math","round","min","className","id","type","inputMode","pattern","value","onChange","e","target","map","votetype","val","key","style","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAwEeA,G,MApEH,WAAO,IAAD,EACkBC,mBAAS,CAAC,CAAC,aAAc,KAD3C,mBACTC,EADS,KACEC,EADF,OAEUF,mBAAS,GAFnB,mBAETG,EAFS,KAEFC,EAFE,OAGgBJ,mBAAS,8BAHzB,mBAGTK,EAHS,KAGCC,EAHD,OAIwBN,mBAAS,KAJjC,mBAITO,EAJS,KAIKC,EAJL,OAKoBR,mBAAS,IAL7B,mBAKTS,EALS,KAKGC,EALH,KAYVC,EAAQ,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,GAAD,OAAIC,eAAJ,iBADX,cACTC,EADS,gBAEUA,EAAOC,OAFjB,OAETC,EAFS,OAGff,EAAae,EAAWC,WACxBZ,EAAYW,EAAWZ,UACvBG,EAAgBS,EAAWE,QALZ,2CAAH,qDAQdC,qBAAU,WACRT,MACC,IAEHS,qBAAU,WACR,IAAIC,EAAYlB,EACZmB,EAAU,EACRC,EAAS,GACftB,EAAUuB,SAAQ,WAAcC,GAAS,IAAD,mBAApBC,EAAoB,KAAdC,EAAc,KACtC,GAAIF,IAAQxB,EAAU2B,OAAS,EAC7BL,EAAOG,GAAQL,MACV,CAEL,IAAMQ,EAAkBC,KAAKC,MAAOJ,EAAML,EAAWD,GACrDE,EAAOG,GAAQG,GAAmBC,KAAKE,IAAIX,EAAW,GACtDC,GAAWK,EACXN,GAAaE,EAAOG,OAGxBhB,EAAca,KACb,CAACpB,EAAOF,IAMX,OACE,yBAAKgC,UAAU,aACb,8DACA,2BAAOC,GAAG,QAAQC,KAAK,SAASC,UAAU,UAAUC,QAAQ,SAASC,MAAOnC,EAAOoC,SAAU,SAAAC,GAAC,OAAIpC,EAASoC,EAAEC,OAAOH,UACpH,6BACA,6BACCrC,EAAUyC,KAAI,SAACC,GAAc,IAAD,EAVdC,EAWb,OACE,yBAAKC,IAAKF,EAAS,GAAIV,UAAU,WAAWa,MAAO,CAAE,gBAAkB,OAAlB,OAhD9C,IAgD8C,aA/C9C,IA+C8C,eAZ1CF,EAYqGD,EAAS,GA9CpH,GAmCI,GAAgBC,GAW4B,QAC7C,UAEDD,EAAS,GAFR,uBAEelC,EAAWkC,EAAS,WAFnC,QAE0C,EAF1C,cAOZ,6BACF,iDAAsB,uBAAGF,OAAO,SAASM,IAAI,sBAAsBC,KAAM3C,GAAnD,sDAA6GE,EAA7G,UCvDN0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aec3b3fd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './App.css';\n\nconst App = () => {\n  const [voteTypes, setVoteTypes] = useState([[\"Loading...\", 1.0]]);\n  const [votes, setVotes] = useState(0);\n  const [guideurl, setGuideURL] = useState(\"http://nymillennials.rocks\");\n  const [seasonNumber, setSeasonNumber] = useState(\"?\");\n  const [voteTotals, setVoteTotals] = useState({});\n  const colorH = 115;\n  const colorS = 100;\n  const maxL = 45;\n  const minL = 15;\n  const debug = false;\n\n  const loadData = async () => {\n    const config = await fetch(`${process.env.PUBLIC_URL}/config.json`);\n    const configJson = await config.json();\n    setVoteTypes(configJson.votetypes);\n    setGuideURL(configJson.guideurl);\n    setSeasonNumber(configJson.season);\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [])\n\n  useEffect(() => {\n    let votesleft = votes;\n    let pctleft = 1.0;\n    const totals = {};\n    voteTypes.forEach(([name, pct], idx) => {\n      if (idx === voteTypes.length - 1) {\n        totals[name] = votesleft;\n      } else {\n        debugger;\n        const calculatedVotes = Math.round((pct / pctleft) * votesleft);\n        totals[name] = calculatedVotes || Math.min(votesleft, 1);\n        pctleft -= pct;\n        votesleft -= totals[name]\n      }\n    });\n    setVoteTotals(totals);\n  }, [votes, voteTypes]);\n\n  const getLValue = (val) => {\n    return maxL - ((maxL - minL) * val);\n  };\n\n  return (\n    <div className=\"container\">\n      <label>How many votes do you have?</label>\n      <input id=\"votes\" type=\"number\" inputMode=\"numeric\" pattern=\"[0-9]*\" value={votes} onChange={e => setVotes(e.target.value)} />\n      <br />\n      <br />\n      {voteTypes.map((votetype) => {\n        return (\n          <div key={votetype[0]} className=\"voteType\" style={{ \"backgroundColor\": `hsl(${colorH}, ${colorS}%, ${getLValue(votetype[1])}%)` }}>\n            {debug ?\n              `${votetype[0]}: ${voteTotals[votetype[0]] ?? 0} votes - ${votes <= 0 ? (0).toFixed(2) : (((voteTotals[votetype[0]] ?? 0) / votes) * 100.0).toFixed(2)}%` :\n              `${votetype[0]}: ${voteTotals[votetype[0]] ?? 0} votes`\n            }\n          </div>\n        );\n      })}\n      <br />\n    <div>Why these picks? <a target=\"_blank\" rel=\"noopener noreferrer\" href={guideurl}>{`Read Newt's awesome voting guide for Season ${seasonNumber}!`}</a></div>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}